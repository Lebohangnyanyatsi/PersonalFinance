<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;za.ac.cput&lt;/groupId&gt;&#10;    &lt;artifactId&gt;PersonalFinance&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;3.4.4&lt;/version&gt;&#10;    &lt;/parent&gt;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!--  https://mvnrepository.com/artifact/com.mysql/mysql-connector-j  --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.mysql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;&#10;            &lt;version&gt;9.2.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;junit&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&lt;/project&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;za.ac.cput&lt;/groupId&gt;&#10;    &lt;artifactId&gt;PersonalFinance&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;3.4.4&lt;/version&gt;&#10;    &lt;/parent&gt;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!--  https://mvnrepository.com/artifact/com.mysql/mysql-connector-j  --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.mysql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;&#10;            &lt;version&gt;9.2.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;junit&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.jpa.hibernate.ddl-auto=update&#10;spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/personalFinancedb?createDatabaseIfNotExist=true&#10;spring.datasource.username= RaneyDev&#10;spring.datasource.password= RaneyGee3&#10;spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver&#10;#spring.jpa.show-sql: true&#10;&#10;server,servlet.context-path=/personalFinance&#10;server.port=8081" />
              <option name="updatedContent" value="spring.jpa.hibernate.ddl-auto=update&#10;spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/personalFinancedb?createDatabaseIfNotExist=true&#10;spring.datasource.username=RaneyDev&#10;spring.datasource.password=RaneyGee3&#10;spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver&#10;#spring.jpa.show-sql: true&#10;&#10;server,servlet.context-path=/personalFinance&#10;server.port=8081" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/za/ac/cput/controller/AdminControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/za/ac/cput/controller/AdminControllerTest.java" />
              <option name="originalContent" value="package za.ac.cput.controller;&#10;&#10;import org.junit.jupiter.api.*;&#10;        import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.boot.test.web.client.TestRestTemplate;&#10;import org.springframework.boot.test.web.server.LocalServerPort;&#10;import org.springframework.http.*;&#10;        import za.ac.cput.domain.Admin;&#10;import za.ac.cput.repository.AdminRepository;&#10;import za.ac.cput.service.AdminService;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)&#10;@TestMethodOrder(MethodOrderer.MethodName.class)&#10;@TestInstance(TestInstance.Lifecycle.PER_CLASS)&#10;public class AdminControllerTest {&#10;&#10;    private Admin admin;&#10;    @Autowired&#10;    private AdminService adminService;&#10;&#10;&#10;    @Autowired&#10;    private AdminRepository adminRepository;&#10;&#10;    @Autowired&#10;    private TestRestTemplate restTemplate;&#10;&#10;    @LocalServerPort&#10;    private int port;&#10;&#10;    private String getBaseUrl() {&#10;        return &quot;http://localhost:&quot; + port + &quot;/api/admin&quot;;&#10;    }&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        admin = new Admin.AdminBuilder()&#10;                .setUserName(&quot;Scelo Nyandeni&quot;)&#10;                .setEmail(&quot;nyandeni@example.com&quot;)&#10;                .setPassword(&quot;securePassword123&quot;)&#10;                .setAdminCode(&quot;ADMIN123&quot;)&#10;                .build();&#10;&#10;        admin = adminService.create(admin);&#10;        assertNotNull(admin.getUserID(), &quot;Admin ID should be generated after save&quot;);&#10;    }&#10;&#10;    @Test&#10;    @Order(1)&#10;    void testCreateAdmin() {&#10;        ResponseEntity&lt;Admin&gt; response = restTemplate.postForEntity(getBaseUrl() + &quot;/create&quot;, admin, Admin.class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertNotNull(response.getBody().getUserID());&#10;        admin = response.getBody();&#10;    }&#10;&#10;    @Test&#10;    @Order(2)&#10;    void testReadAdmin() {&#10;        ResponseEntity&lt;Admin&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/read/&quot; + admin.getUserID(), Admin.class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertEquals(admin.getUserName(), response.getBody().getUserName());&#10;    }&#10;&#10;    @Test&#10;    @Order(3)&#10;    void testUpdateAdmin() {&#10;        Admin updatedAdmin = new Admin.AdminBuilder()&#10;                .copy(admin)&#10;                .setUserName(&quot;Updated Scelo&quot;)&#10;                .build();&#10;&#10;        HttpEntity&lt;Admin&gt; request = new HttpEntity&lt;&gt;(updatedAdmin);&#10;        ResponseEntity&lt;Admin&gt; response = restTemplate.exchange(getBaseUrl() + &quot;/update&quot;, HttpMethod.PUT, request, Admin.class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertEquals(&quot;Updated Scelo&quot;, response.getBody().getUserName());&#10;&#10;        admin = response.getBody();&#10;    }&#10;&#10;    @Test&#10;    @Order(4)&#10;    void testFindByUserName() {&#10;        ResponseEntity&lt;Admin[]&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/findByUserName/&quot; + admin.getUserName(), Admin[].class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        Admin[] admins = response.getBody();&#10;        assertNotNull(admins);&#10;        assertTrue(admins.length &gt; 0);&#10;        assertEquals(admin.getUserName(), admins[0].getUserName());&#10;    }&#10;&#10;    @Test&#10;    @Order(5)&#10;    void testLogIn() {&#10;        var loginRequest = new Object() {&#10;            public String usernameOrEmail = admin.getEmail();&#10;            public String password = admin.getPassword();&#10;        };&#10;&#10;        HttpEntity&lt;Object&gt; request = new HttpEntity&lt;&gt;(loginRequest);&#10;        ResponseEntity&lt;Admin&gt; response = restTemplate.postForEntity(getBaseUrl() + &quot;/login&quot;, request, Admin.class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertEquals(admin.getEmail(), response.getBody().getEmail());&#10;    }&#10;&#10;    @Test&#10;    @Order(6)&#10;    void testDeleteAdmin() {&#10;        restTemplate.delete(getBaseUrl() + &quot;/delete/&quot; + admin.getUserID());&#10;&#10;        ResponseEntity&lt;Admin&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/read/&quot; + admin.getUserID(), Admin.class);&#10;        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());&#10;    }&#10;&#10;    @Test&#10;    @Order(8)&#10;    void testFindByEmail() {&#10;        ResponseEntity&lt;Admin[]&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/findByEmail/&quot; + admin.getEmail(), Admin[].class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;    }&#10;&#10;    @Test&#10;    @Order(9)&#10;    void testFindAll() {&#10;        ResponseEntity&lt;Admin[]&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/findAll&quot;, Admin[].class);&#10;        assertTrue(response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.NOT_FOUND);&#10;    }&#10;&#10;    @Test&#10;    @Order(10)&#10;    void testViewAllRegularUsers() {&#10;        ResponseEntity&lt;Object[]&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/regular-users&quot;, Object[].class);&#10;        assertTrue(response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.NOT_FOUND);&#10;    }&#10;&#10;    @Test&#10;    @Order(11)&#10;    void testViewAnonymizedAnalytics() {&#10;        ResponseEntity&lt;Void&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/analytics&quot;, Void.class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;    }&#10;&#10;    // Category management tests (short)&#10;    @Test&#10;    @Order(12)&#10;    void testCreateCategory() {&#10;        String url = getBaseUrl() + &quot;/categories/create?name=TestCategory&amp;type=Expense&quot;;&#10;        ResponseEntity&lt;Object&gt; response = restTemplate.postForEntity(url, null, Object.class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;    }&#10;&#10;    @Test&#10;    @Order(13)&#10;    void testViewAllCategories() {&#10;        ResponseEntity&lt;Object[]&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/categories/all&quot;, Object[].class);&#10;        assertTrue(response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.NOT_FOUND);&#10;    }&#10;&#10;    }&#10;" />
              <option name="updatedContent" value="package za.ac.cput.controller;&#10;&#10;import org.junit.jupiter.api.*;&#10;        import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.boot.test.web.client.TestRestTemplate;&#10;import org.springframework.boot.test.web.server.LocalServerPort;&#10;import org.springframework.http.*;&#10;        import za.ac.cput.domain.Admin;&#10;import za.ac.cput.repository.AdminRepository;&#10;import za.ac.cput.service.AdminService;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)&#10;@TestMethodOrder(MethodOrderer.MethodName.class)&#10;@TestInstance(TestInstance.Lifecycle.PER_CLASS)&#10;public class AdminControllerTest {&#10;&#10;    private Admin admin;&#10;    @Autowired&#10;    private AdminService adminService;&#10;&#10;&#10;    @Autowired&#10;    private AdminRepository adminRepository;&#10;&#10;    @Autowired&#10;    private TestRestTemplate restTemplate;&#10;&#10;    @LocalServerPort&#10;    private int port;&#10;&#10;    private String getBaseUrl() {&#10;        return &quot;http://localhost:&quot; + port + &quot;/api/admin&quot;;&#10;    }&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        admin = new Admin.AdminBuilder()&#10;                .setUserName(&quot;Scelo Nyandeni&quot;)&#10;                .setEmail(&quot;nyandeni@example.com&quot;)&#10;                .setPassword(&quot;securePassword123&quot;)&#10;                .setAdminCode(&quot;ADMIN123&quot;)&#10;                .build();&#10;&#10;        admin = adminService.create(admin);&#10;        assertNotNull(admin.getUserID(), &quot;Admin ID should be generated after save&quot;);&#10;    }&#10;&#10;    @Test&#10;    @Order(1)&#10;    void testCreateAdmin() {&#10;        ResponseEntity&lt;Admin&gt; response = restTemplate.postForEntity(getBaseUrl() + &quot;/create&quot;, admin, Admin.class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertNotNull(response.getBody().getUserID());&#10;        admin = response.getBody();&#10;    }&#10;&#10;    @Test&#10;    @Order(2)&#10;    void testReadAdmin() {&#10;        ResponseEntity&lt;Admin&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/read/&quot; + admin.getUserID(), Admin.class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertEquals(admin.getUserName(), response.getBody().getUserName());&#10;    }&#10;&#10;    @Test&#10;    @Order(3)&#10;    void testUpdateAdmin() {&#10;        Admin updatedAdmin = new Admin.AdminBuilder()&#10;                .copy(admin)&#10;                .setUserName(&quot;Updated Scelo&quot;)&#10;                .build();&#10;&#10;        HttpEntity&lt;Admin&gt; request = new HttpEntity&lt;&gt;(updatedAdmin);&#10;        ResponseEntity&lt;Admin&gt; response = restTemplate.exchange(getBaseUrl() + &quot;/update&quot;, HttpMethod.PUT, request, Admin.class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertEquals(&quot;Updated Scelo&quot;, response.getBody().getUserName());&#10;&#10;        admin = response.getBody();&#10;    }&#10;&#10;    @Test&#10;    @Order(4)&#10;    void testFindByUserName() {&#10;        ResponseEntity&lt;Admin[]&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/findByUserName/&quot; + admin.getUserName(), Admin[].class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        Admin[] admins = response.getBody();&#10;        assertNotNull(admins);&#10;        assertTrue(admins.length &gt; 0);&#10;        assertEquals(admin.getUserName(), admins[0].getUserName());&#10;    }&#10;&#10;    @Test&#10;    @Order(5)&#10;    void testLogIn() {&#10;        var loginRequest = new Object() {&#10;            public String usernameOrEmail = admin.getEmail();&#10;            public String password = admin.getPassword();&#10;        };&#10;&#10;        HttpEntity&lt;Object&gt; request = new HttpEntity&lt;&gt;(loginRequest);&#10;        ResponseEntity&lt;Admin&gt; response = restTemplate.postForEntity(getBaseUrl() + &quot;/login&quot;, request, Admin.class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertEquals(admin.getEmail(), response.getBody().getEmail());&#10;    }&#10;&#10;    @Test&#10;    @Order(6)&#10;    void testDeleteAdmin() {&#10;        restTemplate.delete(getBaseUrl() + &quot;/delete/&quot; + admin.getUserID());&#10;&#10;        ResponseEntity&lt;Admin&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/read/&quot; + admin.getUserID(), Admin.class);&#10;        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());&#10;    }&#10;&#10;    @Test&#10;    @Order(8)&#10;    void testFindByEmail() {&#10;        ResponseEntity&lt;Admin[]&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/findByEmail/&quot; + admin.getEmail(), Admin[].class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;    }&#10;&#10;    @Test&#10;    @Order(9)&#10;    void testFindAll() {&#10;        ResponseEntity&lt;Admin[]&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/findAll&quot;, Admin[].class);&#10;        assertTrue(response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.NOT_FOUND);&#10;    }&#10;&#10;    @Test&#10;    @Order(10)&#10;    void testViewAllRegularUsers() {&#10;        ResponseEntity&lt;Object[]&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/regular-users&quot;, Object[].class);&#10;        assertTrue(response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.NOT_FOUND);&#10;    }&#10;&#10;    @Test&#10;    @Order(11)&#10;    void testViewAnonymizedAnalytics() {&#10;        ResponseEntity&lt;Void&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/analytics&quot;, Void.class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;    }&#10;&#10;    // Category management tests (short)&#10;    @Test&#10;    @Order(12)&#10;    void testCreateCategory() {&#10;        String url = getBaseUrl() + &quot;/categories/create?name=TestCategory&amp;type=Expense&quot;;&#10;        ResponseEntity&lt;Object&gt; response = restTemplate.postForEntity(url, null, Object.class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;    }&#10;&#10;    @Test&#10;    @Order(13)&#10;    void testViewAllCategories() {&#10;        ResponseEntity&lt;Object[]&gt; response = restTemplate.getForEntity(getBaseUrl() + &quot;/categories/all&quot;, Object[].class);&#10;        assertTrue(response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.NOT_FOUND);&#10;    }&#10;&#10;    }&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/resources/application.properties" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="spring.datasource.url=jdbc:mysql://localhost:3306/personal_finance_test?createDatabaseIfNotExist=true&#10;spring.datasource.username=RaneyDev&#10;spring.datasource.password=RaneyGee3&#10;spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>